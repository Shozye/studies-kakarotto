[ PSEUDOKOD ]
mod(a[in], b[in], p[inout])
    p := 0
    if b != 0:
        b_copy = b;
        while a >= b:
            b *= 2;
        end

        repeat:
            b /= 2;
            IF b <= a
                a -= b;
        until a < b_copy
    p := a
    endif
return

Kod trÃ³jadresowy
IF a = 0 GOTO E_MOD_BORING_CASE
IF b > 0 GOTO IF_BODY
    p := 0; [ E_MOD_BORING_CASE ]
    RETURN

IF_BODY: b_copy := b;
IF a < b GOTO E_MOD_WHILE2_BODY
E_MOD_WHILE1_BODY: b *= 2
IF a >= b GOTO E_MOD_WHILE1_BODY

E_MOD_WHILE2_BODY : b /= 2
IF b > a GOTO E_MOD_WHILE2_BODY
a -= b;
IF a >= b_copy GOTO E_MOD_WHILE2_BODY

p := a
RETURN [E_ENDWHILE ]


Kod z etykietami i zmiennymi :
[ Pamiec:
 0 | zajety na dzialania
 1 | nieuzywane lol
 2 | a
 3 | b
 4 | p
 6 | b_copy
 Etykiety: E_WHILE_BODY, E_INNER_WHILE_BODY, E_INNER_ENDWHILE, E_ENDWHILE ]

LOAD a
JZERO E_MOD_BORING_CASE
LOAD b [ IF b > 0 GOTO IF_MOD_BODY ]  [ IF_MOD_BODY: b_copy := b; ] [ IF a < b GOTO E_MOD_WHILE2_BODY ]
JPOS E_IF_MOD_BODY
E_MOD_BORING_CASE : SET 0 [ p := 0; ]
JUMP E_MOD_END

E_IF_MOD_BODY : STORE b_copy
SUB a
JPOS E_MOD_WHILE2_BODY
E_MOD_WHILE1_BODY : LOAD b [ b *= 2 ] [ IF a >= b GOTO E_MOD_WHILE1_BODY ]
ADD *storage_0*
STORE b
SUB a
JZERO E_MOD_WHILE1_BODY
E_MOD_WHILE2_BODY : LOAD b [ b /= 2 ]
HALF
STORE b
SUB a [ IF b > a GOTO E_MOD_WHILE2_BODY ]
JPOS E_MOD_WHILE2_BODY
LOAD a [ a -= b; ]
SUB b
STORE a
LOAD b_copy [ IF a >= b_copy GOTO E_MOD_WHILE2_BODY ]
SUB a
JZERO E_MOD_WHILE2_BODY
LOAD a


E_MOD_END : STOREI p
JUMPI $ret
