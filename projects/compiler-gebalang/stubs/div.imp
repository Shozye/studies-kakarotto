[ PSEUDOKOD ]
div(a[in], b[in], p[inout])
    p := 0
    if b != 0:
        temp := 1;
        while a >= b:
            temp *= 2;
            b *= 2;
        end

        repeat:
            IF b <= a
                p += temp;
                a -= b;
            b /= 2;
            temp /= 2;
        until temp = 0
    endif
return

[ Kod trÃ³jadresowy ]
GET a
GET b
p := 0
IF b == 0 GOTO E_ENDPROGRAM

temp := 1
IF a < b GOTO E_WHILE2_BODY
temp := temp * 2; [ E_WHILE1_BODY ]
b := b * 2;
IF a >= b GOTO E_WHILE1_BODY

IF b > a GOTO E_ENDIF [E_WHILE2_BODY]
    p := p + temp;
    a := a - b;
b := b / 2; [ E_ENDIF ]
temp := temp / 2;
IF temp > 0 GOTO E_WHILE2_BODY

PUT p [ E_ENDPROGRAM ]

Kod z etykietami i zmiennymi :
[ Pamiec:
 0 | zajety na dzialania
 1 | nieuzywane lol
 2 | a
 3 | b
 4 | p
 5 | temp

 Etykiety: E_ENDPROGRAM, E_ENDWHILE1, E_WHILE1_BODY,
 E_ENDWHILE2, E_ENDIF, E_WHILE2_BODY ]

SET 0 [ p := 0 ]
STOREI p
LOAD b [ IF b == 0 GOTO E_ENDPROGRAM ]
JZERO E_ENDPROGRAM
SET 1 [ temp := 1 ]
STORE temp
LOAD b [ IF a < b GOTO E_WHILE2_BODY ]
SUB a
JPOS E_WHILE2_BODY
E_WHILE1_BODY : LOAD temp [ temp := temp * 2 ]
ADD *storage_0*
STORE temp
LOAD b [ b := b * 2 ]
ADD *storage_0*
STORE b
SUB a [ IF a >= b GOTO E_WHILE1_BODY ]
JZERO E_WHILE1_BODY
E_WHILE2_BODY : LOAD b [ IF b > a GOTO E_ENDIF ]
SUB a
JPOS E_ENDIF
LOADI p [ p := p + temp; ]
ADD temp
STOREI p
LOAD a [ a := a - b; ]
SUB b
STORE a
E_ENDIF : LOAD b [ b := b / 2; ]
HALF
STORE b
LOAD temp [ temp := temp / 2; ]
HALF
STORE temp
JPOS E_WHILE2_BODY [ IF temp > 0 GOTO E_WHILE2_BODY ]
E_ENDPROGRAM : JUMPI $ret [ return ]