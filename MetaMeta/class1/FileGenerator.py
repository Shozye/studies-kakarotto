import sys
import math
import time
import os
import shutil
import tsplib95.models
import numpy as np


class FileGenerator:
    DATASET_DIR_NAME = "datasets"

    def __init__(self):
        pass

    def create_symmetric_dataset(self, name: str, dimension: int, max_num=1000):
        matrix = np.random.randint(0, max_num + 1, (dimension, dimension))
        for i in range(dimension):
            matrix[i][i] = 0
        for row in range(dimension):
            for col in range(row+1, dimension):
                matrix[col][row] = matrix[row][col]
        self.create_dataset(name, list(matrix))

    def create_asymmetric_dataset(self, name: str, dimension: int, max_num=1000):
        matrix = np.random.randint(0, max_num + 1, (dimension, dimension))
        for i in range(dimension):
            matrix[i][i] = 0
        self.create_dataset(name, list(matrix))

    def create_dataset(self, name, full_matrix: list):
        self.create_dataset_directory()
        dimension = len(full_matrix)
        fullname = f"{name}{dimension}"
        if fullname in os.listdir(os.path.join(os.getcwd(), self.DATASET_DIR_NAME)):
            print(f"{fullname} file already in datasets. Choose different name")
            sys.exit(1)
        os.mkdir(os.path.join(os.getcwd(), self.DATASET_DIR_NAME, fullname))

        problem = tsplib95.models.StandardProblem.parse("")
        problem.dimension = dimension
        problem.name = fullname
        problem.type = "TSP"
        problem.comment = f"{dimension} nodes randomly generated by FileGenerator.py ~ Mateusz Pelechaty 2022"
        problem.edge_weight_type = "EXPLICIT"
        problem.edge_weight_format = "FULL_MATRIX"
        problem.display_data_type = "TWOD_DISPLAY"
        problem.edge_weights = full_matrix
        path = os.path.join(os.getcwd(), self.DATASET_DIR_NAME, fullname, f"{fullname}.tsp")
        problem.save(path)
        with open(path, 'a+') as file:
            file.write("\n")

    def create_dataset_directory(self):
        if self.DATASET_DIR_NAME not in os.listdir(os.getcwd()):
            os.mkdir(self.DATASET_DIR_NAME)


if __name__ == "__main__":
    ### CLEAN DATASETS
    shutil.rmtree("datasets")

    generator = FileGenerator()
    generator.create_dataset("test"+str(math.floor(time.time()%3600)), [[0,1], [1,0]])

    generator.create_symmetric_dataset("shozy", 4)
    generator.create_asymmetric_dataset("babus", 3)
